{
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.AdminController.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.AdminController.html",
    "title": "Class AdminController | proveedores.usc.com.co",
    "summary": "Class AdminController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll Controlador que maneja las acciones relacionadas con la administración, incluyendo la gestión de proveedores y certificados. [Authorize(Roles = \"Admin\")] public class AdminController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AdminController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminController(CertificateServiceExcel, ProviderService) Constructor del controlador que recibe instancias de los servicios necesarios. public AdminController(CertificateServiceExcel certificateServiceExcel, ProviderService providerService) Parameters certificateServiceExcel CertificateServiceExcel Servicio de certificados desde Excel. providerService ProviderService Servicio de proveedores. Methods GetProviders(int, int, string?) Acción que obtiene la lista de proveedores con paginación y búsqueda opcional. [HttpGet] public IActionResult GetProviders(int pageNumber = 1, int pageSize = 100, string? search = null) Parameters pageNumber int Número de la página actual. pageSize int Cantidad de elementos por página. search string Término de búsqueda opcional para filtrar proveedores por NIT o nombre. Returns IActionResult Lista de proveedores que coinciden con los criterios de búsqueda y paginación. ProviderList() Acción que muestra la vista para la administración de proveedores. public ActionResult ProviderList() Returns ActionResult Vista de administración de proveedores. RestoreProviderPassword(string) Acción que restaura la contraseña de un proveedor a su valor predeterminado (NIT). [HttpGet] public IActionResult RestoreProviderPassword(string nit) Parameters nit string NIT del proveedor. Returns IActionResult Resultado de la operación de restauración de contraseña. UpdateCertificateInfo(IFormFile, string) Acción que maneja la actualización de la información de los certificados desde un archivo Excel. [HttpPost] public IActionResult UpdateCertificateInfo(IFormFile file, string infoType) Parameters file IFormFile Archivo Excel que contiene la información de los certificados. infoType string Tipo de información (IVA, ICA, RTF). Returns IActionResult Resultado de la operación de actualización. UpdateInfo() Acción que muestra la vista principal del administrador. public ActionResult UpdateInfo() Returns ActionResult Vista principal del administrador. UpdateProvider(ProveedoresMaster) Acción que actualiza la información de un proveedor. [HttpPost] public IActionResult UpdateProvider(ProveedoresMaster provider) Parameters provider ProveedoresMaster Objeto ProveedoresMaster con la información actualizada del proveedor. Returns IActionResult Resultado de la operación de actualización."
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.LoginController.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.LoginController.html",
    "title": "Class LoginController | proveedores.usc.com.co",
    "summary": "Class LoginController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll Controlador que maneja las acciones relacionadas con el inicio de sesión y cierre de sesión. public class LoginController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller LoginController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginController(LoginService) Constructor del controlador que recibe una instancia de LoginService. public LoginController(LoginService loginService) Parameters loginService LoginService Servicio de login. Methods Index() Acción que muestra la vista de inicio de sesión. public ActionResult Index() Returns ActionResult Vista de inicio de sesión. Login(LoginViewModel) Acción que maneja el envío del formulario de inicio de sesión. [HttpPost] public Task<ActionResult> Login(LoginViewModel model) Parameters model LoginViewModel Modelo de vista de inicio de sesión. Returns Task<ActionResult> Redirección a la página correspondiente según el rol del usuario. Logout() Acción que maneja el cierre de sesión. public ActionResult Logout() Returns ActionResult Redirección a la página de inicio de sesión."
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.ProviderController.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.ProviderController.html",
    "title": "Class ProviderController | proveedores.usc.com.co",
    "summary": "Class ProviderController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll [Authorize] public class ProviderController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ProviderController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProviderController(BillService, ProviderService, CertificatesService, LogService) public ProviderController(BillService billService, ProviderService providerService, CertificatesService certificatesServices, LogService logService) Parameters billService BillService providerService ProviderService certificatesServices CertificatesService logService LogService Methods Bill() public ActionResult Bill() Returns ActionResult Certificates() public ActionResult Certificates() Returns ActionResult DeleteCertificate(string) [HttpPost] public IActionResult DeleteCertificate(string url) Parameters url string Returns IActionResult GenerateCertificate(string, string, string, string) [HttpPost] public IActionResult GenerateCertificate(string certificateType, string companyId, string year, string period) Parameters certificateType string companyId string year string period string Returns IActionResult UpdatePassword(string) [HttpPost] public IActionResult UpdatePassword(string password) Parameters password string Returns IActionResult UpdateProvider(ProveedoresMaster) public IActionResult UpdateProvider(ProveedoresMaster provider) Parameters provider ProveedoresMaster Returns IActionResult VerifyPassword(string) [HttpPost] public IActionResult VerifyPassword(string currentPassword) Parameters currentPassword string Returns IActionResult editProfile() public ActionResult editProfile() Returns ActionResult"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Controllers.html",
    "title": "Namespace CasaToro.Consulta.Certificados.Web.Controllers | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.Web.Controllers Classes AdminController Controlador que maneja las acciones relacionadas con la administración, incluyendo la gestión de proveedores y certificados. LoginController Controlador que maneja las acciones relacionadas con el inicio de sesión y cierre de sesión. ProviderController"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.BillsViewModel.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.BillsViewModel.html",
    "title": "Class BillsViewModel | proveedores.usc.com.co",
    "summary": "Class BillsViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class BillsViewModel Inheritance object BillsViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bills public List<FacturasProveedore> Bills { get; set; } Property Value List<FacturasProveedore>"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.CertificatesViewModel.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.CertificatesViewModel.html",
    "title": "Class CertificatesViewModel | proveedores.usc.com.co",
    "summary": "Class CertificatesViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class CertificatesViewModel Inheritance object CertificatesViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields companies public List<EmpresasMaster> companies Field Value List<EmpresasMaster> months public HashSet<string> months Field Value HashSet<string> years public HashSet<int> years Field Value HashSet<int>"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.LoginViewModel.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.LoginViewModel.html",
    "title": "Class LoginViewModel | proveedores.usc.com.co",
    "summary": "Class LoginViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class LoginViewModel Inheritance object LoginViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password public string Password { get; set; } Property Value string UserName public string UserName { get; set; } Property Value string"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.ProfileViewModel.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.ProfileViewModel.html",
    "title": "Class ProfileViewModel | proveedores.usc.com.co",
    "summary": "Class ProfileViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class ProfileViewModel Inheritance object ProfileViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Provider public ProveedoresMaster Provider { get; set; } Property Value ProveedoresMaster"
  },
  "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.html": {
    "href": "CasaToro.Consulta.Certificados.Web/api/CasaToro.Consulta.Certificados.Web.Models.html",
    "title": "Namespace CasaToro.Consulta.Certificados.Web.Models | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.Web.Models Classes BillsViewModel CertificatesViewModel LoginViewModel ProfileViewModel"
  },
  "CasaToro.Consulta.Certificados.Web/docs/getting-started.html": {
    "href": "CasaToro.Consulta.Certificados.Web/docs/getting-started.html",
    "title": "Getting Started | proveedores.usc.com.co",
    "summary": "Getting Started"
  },
  "CasaToro.Consulta.Certificados.Web/docs/introduction.html": {
    "href": "CasaToro.Consulta.Certificados.Web/docs/introduction.html",
    "title": "Introduction | proveedores.usc.com.co",
    "summary": "Introduction"
  },
  "CasaToro.Consulta.Certificados.Web/index.html": {
    "href": "CasaToro.Consulta.Certificados.Web/index.html",
    "title": "This is the HOMEPAGE. | proveedores.usc.com.co",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "CasaToro.Consulta.Certificados.Web/obj/Release/net8.0/PubTmp/Out/wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "CasaToro.Consulta.Certificados.Web/obj/Release/net8.0/PubTmp/Out/wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | proveedores.usc.com.co",
    "summary": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "CasaToro.Consulta.Certificados.Web/wwwroot/lib/jquery-validation/LICENSE.html": {
    "href": "CasaToro.Consulta.Certificados.Web/wwwroot/lib/jquery-validation/LICENSE.html",
    "title": "The MIT License (MIT) | proveedores.usc.com.co",
    "summary": "The MIT License (MIT) Copyright Jörn Zaefferer Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.AdminService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.AdminService.html",
    "title": "Class AdminService | proveedores.usc.com.co",
    "summary": "Class AdminService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja las operaciones relacionadas con los administradores, incluyendo la obtención de información de administradores. public class AdminService Inheritance object AdminService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminService(ApplicationDbContext) Constructor de la clase AdminService. public AdminService(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos. Methods getAdminById(string) Obtiene un administrador por su ID. public Administradore getAdminById(string id) Parameters id string ID del administrador. Returns Administradore Objeto Administradore que coincide con el ID proporcionado."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.BillService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.BillService.html",
    "title": "Class BillService | proveedores.usc.com.co",
    "summary": "Class BillService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja las operaciones relacionadas con las facturas, incluyendo la obtención de facturas para un proveedor específico. public class BillService Inheritance object BillService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BillService(ApplicationDbContext) Constructor de la clase BillService. public BillService(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos. Methods GetBillsForProvider(string) Obtiene una lista de facturas para un proveedor específico por su NIT. public List<FacturasProveedore> GetBillsForProvider(string nit) Parameters nit string NIT del proveedor. Returns List<FacturasProveedore> Lista de facturas asociadas al proveedor."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.CertificateServiceExcel.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.CertificateServiceExcel.html",
    "title": "Class CertificateServiceExcel | proveedores.usc.com.co",
    "summary": "Class CertificateServiceExcel Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja la importación y procesamiento de información de certificados desde archivos Excel. public class CertificateServiceExcel Inheritance object CertificateServiceExcel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CertificateServiceExcel(ApplicationDbContext) Constructor de la clase CertificateServiceExcel. public CertificateServiceExcel(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos. Methods AddInfoIcaFromExcel(IFormFile) Agrega información de certificados de ICA desde un archivo Excel. public (string message, bool success) AddInfoIcaFromExcel(IFormFile file) Parameters file IFormFile Archivo Excel que contiene la información de los certificados de ICA. Returns (string message, bool success) Una tupla que contiene un mensaje y un indicador de éxito. Exceptions InvalidExcelFormatException Lanzada cuando el archivo Excel no tiene el formato esperado. AddInfoIvaFromExcel(IFormFile) Agrega información de certificados de IVA desde un archivo Excel. public (string message, bool success) AddInfoIvaFromExcel(IFormFile file) Parameters file IFormFile Archivo Excel que contiene la información de los certificados de IVA. Returns (string message, bool success) Una tupla que contiene un mensaje y un indicador de éxito. Exceptions InvalidExcelFormatException Lanzada cuando el archivo Excel no tiene el formato esperado. AddInfoRtfFromExcel(IFormFile) Agrega información de certificados de RTF desde un archivo Excel. public (string message, bool success) AddInfoRtfFromExcel(IFormFile file) Parameters file IFormFile Archivo Excel que contiene la información de los certificados de RTF. Returns (string message, bool success) Una tupla que contiene un mensaje y un indicador de éxito. Exceptions InvalidExcelFormatException Lanzada cuando el archivo Excel no tiene el formato esperado."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.CertificatesService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.CertificatesService.html",
    "title": "Class CertificatesService | proveedores.usc.com.co",
    "summary": "Class CertificatesService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja la generación y obtención de certificados de retención (IVA, ICA, RTF) desde la base de datos y su exportación a PDF. public class CertificatesService Inheritance object CertificatesService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CertificatesService(ApplicationDbContext) Constructor de la clase CertificatesService public CertificatesService(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos Methods GenerateCertificate(string, string, string, string, string) Genera un certificado de retención. public string GenerateCertificate(string certificateType, string companyId, string year, string period, string nit) Parameters certificateType string Tipo de certificado (1: IVA, 2: ICA, 3: RTF). companyId string ID de la empresa. year string Año del certificado. period string Periodo del certificado. nit string NIT del proveedor. Returns string URL del certificado generado. GetAvalibleMonths() Obtiene los meses disponibles para los certificados. public HashSet<string> GetAvalibleMonths() Returns HashSet<string> Conjunto de meses disponibles para los certificados. GetAvalibleYears() Obtiene los meses disponibles para los certificados. public HashSet<int> GetAvalibleYears() Returns HashSet<int> Conjunto de meses disponibles para los certificados."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.InvalidExcelFormatException.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.InvalidExcelFormatException.html",
    "title": "Class InvalidExcelFormatException | proveedores.usc.com.co",
    "summary": "Class InvalidExcelFormatException Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Excepción lanzada cuando el archivo Excel no tiene el formato esperado public class InvalidExcelFormatException : Exception, ISerializable Inheritance object Exception InvalidExcelFormatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors InvalidExcelFormatException(string) public InvalidExcelFormatException(string message) Parameters message string"
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.LogService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.LogService.html",
    "title": "Class LogService | proveedores.usc.com.co",
    "summary": "Class LogService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja el registro y la gestión de logs de actividades y eventos en el sistema. public class LogService Inheritance object LogService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LogService(ApplicationDbContext) Constructor de la clase LogService. public LogService(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos. Methods addLogDownload(LogDescarga) Agrega un registro de descarga al sistema de logs. public void addLogDownload(LogDescarga log) Parameters log LogDescarga Objeto LogDescarga que contiene la información del registro de descarga. addLogLogin(LogLogin) Agrega un registro de inicio de sesión al sistema de logs. public void addLogLogin(LogLogin log) Parameters log LogLogin Objeto LogLogin que contiene la información del registro de inicio de sesión. addLogLoginAdmin(LogLoginAdmin) Agrega un registro de inicio de sesión de administrador al sistema de logs. public void addLogLoginAdmin(LogLoginAdmin log) Parameters log LogLoginAdmin Objeto LogLoginAdmin que contiene la información del registro de inicio de sesión de administrador."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.LoginService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.LoginService.html",
    "title": "Class LoginService | proveedores.usc.com.co",
    "summary": "Class LoginService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja las operaciones de autenticación y gestión de sesiones de usuarios. public class LoginService Inheritance object LoginService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginService(ProviderService, LogService, AdminService) Constructor de la clase LoginService. public LoginService(ProviderService providerService, LogService logService, AdminService adminService) Parameters providerService ProviderService Servicio para manejar proveedores. logService LogService Servicio para manejar logs. adminService AdminService Servicio para manejar administradores. Methods Authenticate(string, string) Autentica a un usuario basado en su nombre de usuario y contraseña. public (bool IsAuthenticated, ClaimsPrincipal Principal, string ErrorMessage, bool isAdmin) Authenticate(string user, string pass) Parameters user string Nombre de usuario o NIT del usuario. pass string Contraseña del usuario. Returns (bool IsAuthenticated, ClaimsPrincipal Principal, string ErrorMessage, bool isAdmin) Una tupla que indica si la autenticación fue exitosa, el ClaimsPrincipal del usuario, un mensaje de error si lo hay, y si el usuario es un administrador. HashSHA256(string) Hashea una cadena de texto utilizando el algoritmo SHA256. public static string HashSHA256(string input) Parameters input string Cadena de texto a hashear. Returns string Cadena de texto hasheada en formato hexadecimal."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.ProviderService.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.ProviderService.html",
    "title": "Class ProviderService | proveedores.usc.com.co",
    "summary": "Class ProviderService Namespace CasaToro.Consulta.Certificados.BL.Services Assembly CasaToro.Consulta.Certificados.BL.dll Servicio que maneja las operaciones relacionadas con los proveedores, incluyendo la gestión de información y autenticación de proveedores. public class ProviderService Inheritance object ProviderService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProviderService(ApplicationDbContext) Constructor de la clase ProviderService. public ProviderService(ApplicationDbContext context) Parameters context ApplicationDbContext Contexto de la base de datos. Methods GetCompaniesForProvider(string) Obtiene una lista de empresas asociadas a un proveedor por su NIT. public List<EmpresasMaster> GetCompaniesForProvider(string nit) Parameters nit string NIT del proveedor. Returns List<EmpresasMaster> Lista de empresas asociadas al proveedor. RestoreProviderPassword(string) Restaura la contraseña de un proveedor a su valor predeterminado (NIT). public void RestoreProviderPassword(string nit) Parameters nit string NIT del proveedor. Exceptions Exception Lanzada cuando ocurre un error al restaurar la contraseña del proveedor. UpdatePassword(ProveedoresMaster) Actualiza la contraseña de un proveedor. public void UpdatePassword(ProveedoresMaster provider) Parameters provider ProveedoresMaster Objeto ProveedoresMaster con la nueva contraseña del proveedor. Exceptions Exception Lanzada cuando ocurre un error al actualizar la contraseña del proveedor. UpdateProvider(ProveedoresMaster) Actualiza la información de un proveedor. public void UpdateProvider(ProveedoresMaster provider) Parameters provider ProveedoresMaster Objeto ProveedoresMaster con la información actualizada del proveedor. Exceptions Exception Lanzada cuando ocurre un error al actualizar el proveedor. getPoviderByNit(string) Obtiene un proveedor por su NIT. public ProveedoresMaster getPoviderByNit(string nit) Parameters nit string NIT del proveedor. Returns ProveedoresMaster Proveedor que coincide con el NIT proporcionado. getProviders(int, int, string?) Obtiene una lista de proveedores con paginación y búsqueda opcional. public List<ProveedoresMaster> getProviders(int pageNumber, int pageSize, string? search = null) Parameters pageNumber int Número de la página actual. pageSize int Cantidad de elementos por página. search string Término de búsqueda opcional para filtrar proveedores por NIT o nombre. Returns List<ProveedoresMaster> Lista de proveedores que coinciden con los criterios de búsqueda y paginación. Exceptions Exception Lanzada cuando ocurre un error al obtener la lista de proveedores. getProvidersCount(string?) Obtiene el total de proveedores que coinciden con un término de búsqueda opcional. public int getProvidersCount(string? search = null) Parameters search string Término de búsqueda opcional para filtrar proveedores por NIT o nombre. Returns int Cantidad total de proveedores que coinciden con el término de búsqueda."
  },
  "api/CasaToro.Consulta.Certificados.BL.Services.html": {
    "href": "api/CasaToro.Consulta.Certificados.BL.Services.html",
    "title": "Namespace CasaToro.Consulta.Certificados.BL.Services | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.BL.Services Classes AdminService Servicio que maneja las operaciones relacionadas con los administradores, incluyendo la obtención de información de administradores. BillService Servicio que maneja las operaciones relacionadas con las facturas, incluyendo la obtención de facturas para un proveedor específico. CertificateServiceExcel Servicio que maneja la importación y procesamiento de información de certificados desde archivos Excel. CertificatesService Servicio que maneja la generación y obtención de certificados de retención (IVA, ICA, RTF) desde la base de datos y su exportación a PDF. InvalidExcelFormatException Excepción lanzada cuando el archivo Excel no tiene el formato esperado LogService Servicio que maneja el registro y la gestión de logs de actividades y eventos en el sistema. LoginService Servicio que maneja las operaciones de autenticación y gestión de sesiones de usuarios. ProviderService Servicio que maneja las operaciones relacionadas con los proveedores, incluyendo la gestión de información y autenticación de proveedores."
  },
  "api/CasaToro.Consulta.Certificados.DAL.ApplicationDbContext.html": {
    "href": "api/CasaToro.Consulta.Certificados.DAL.ApplicationDbContext.html",
    "title": "Class ApplicationDbContext | proveedores.usc.com.co",
    "summary": "Class ApplicationDbContext Namespace CasaToro.Consulta.Certificados.DAL Assembly CasaToro.Consulta.Certificados.DAL.dll public class ApplicationDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable Inheritance object DbContext ApplicationDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationDbContext() public ApplicationDbContext() ApplicationDbContext(DbContextOptions<ApplicationDbContext>) public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options) Parameters options DbContextOptions<ApplicationDbContext> Properties Administradores public virtual DbSet<Administradore> Administradores { get; set; } Property Value DbSet<Administradore> CertificadosIcas public virtual DbSet<CertificadosIca> CertificadosIcas { get; set; } Property Value DbSet<CertificadosIca> CertificadosIvas public virtual DbSet<CertificadosIva> CertificadosIvas { get; set; } Property Value DbSet<CertificadosIva> CertificadosRteftes public virtual DbSet<CertificadosRtefte> CertificadosRteftes { get; set; } Property Value DbSet<CertificadosRtefte> EmpresasMasters public virtual DbSet<EmpresasMaster> EmpresasMasters { get; set; } Property Value DbSet<EmpresasMaster> EmpresasProveedores public virtual DbSet<EmpresasProveedore> EmpresasProveedores { get; set; } Property Value DbSet<EmpresasProveedore> FacturasProveedores public virtual DbSet<FacturasProveedore> FacturasProveedores { get; set; } Property Value DbSet<FacturasProveedore> LogDescargas public virtual DbSet<LogDescarga> LogDescargas { get; set; } Property Value DbSet<LogDescarga> LogLoginAdmins public virtual DbSet<LogLoginAdmin> LogLoginAdmins { get; set; } Property Value DbSet<LogLoginAdmin> LogLogins public virtual DbSet<LogLogin> LogLogins { get; set; } Property Value DbSet<LogLogin> ProveedoresMasters public virtual DbSet<ProveedoresMaster> ProveedoresMasters { get; set; } Property Value DbSet<ProveedoresMaster> Methods OnConfiguring(DbContextOptionsBuilder) Override this method to configure the database (and other options) to be used for this context. This method is called for each instance of the context that is created. The base implementation does nothing. protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) Parameters optionsBuilder DbContextOptionsBuilder A builder used to create or modify options for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure the context. Remarks In situations where an instance of DbContextOptions may or may not have been passed to the constructor, you can use IsConfigured to determine if the options have already been set, and skip some or all of the logic in OnConfiguring(DbContextOptionsBuilder). See DbContext lifetime, configuration, and initialization for more information and examples. OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/CasaToro.Consulta.Certificados.DAL.html": {
    "href": "api/CasaToro.Consulta.Certificados.DAL.html",
    "title": "Namespace CasaToro.Consulta.Certificados.DAL | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.DAL Classes ApplicationDbContext"
  },
  "api/CasaToro.Consulta.Certificados.Entities.Administradore.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.Administradore.html",
    "title": "Class Administradore | proveedores.usc.com.co",
    "summary": "Class Administradore Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class Administradore Inheritance object Administradore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Contrasena public string Contrasena { get; set; } Property Value string IdAdmin public string IdAdmin { get; set; } Property Value string LogLoginAdmins public virtual ICollection<LogLoginAdmin> LogLoginAdmins { get; set; } Property Value ICollection<LogLoginAdmin> Nombre public string Nombre { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.CertificadosIca.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.CertificadosIca.html",
    "title": "Class CertificadosIca | proveedores.usc.com.co",
    "summary": "Class CertificadosIca Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class CertificadosIca Inheritance object CertificadosIca Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ano public int Ano { get; set; } Property Value int Base public decimal Base { get; set; } Property Value decimal CiudadExpedido public string CiudadExpedido { get; set; } Property Value string CiudadPago public string CiudadPago { get; set; } Property Value string Concepto public string Concepto { get; set; } Property Value string FechaExpedicion public DateOnly FechaExpedicion { get; set; } Property Value DateOnly IdEmpresa public int IdEmpresa { get; set; } Property Value int IdEmpresaNavigation public virtual EmpresasMaster IdEmpresaNavigation { get; set; } Property Value EmpresasMaster IdIca public Guid IdIca { get; set; } Property Value Guid Nit public string Nit { get; set; } Property Value string NitNavigation public virtual ProveedoresMaster NitNavigation { get; set; } Property Value ProveedoresMaster Periodo public int Periodo { get; set; } Property Value int Porcentaje public decimal Porcentaje { get; set; } Property Value decimal Retenido public decimal Retenido { get; set; } Property Value decimal"
  },
  "api/CasaToro.Consulta.Certificados.Entities.CertificadosIva.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.CertificadosIva.html",
    "title": "Class CertificadosIva | proveedores.usc.com.co",
    "summary": "Class CertificadosIva Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class CertificadosIva Inheritance object CertificadosIva Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ano public int Ano { get; set; } Property Value int Base public decimal Base { get; set; } Property Value decimal CiudadExpedido public string CiudadExpedido { get; set; } Property Value string CiudadPago public string CiudadPago { get; set; } Property Value string Concepto public string Concepto { get; set; } Property Value string FechaExpedicion public DateOnly FechaExpedicion { get; set; } Property Value DateOnly IdEmpresa public int IdEmpresa { get; set; } Property Value int IdEmpresaNavigation public virtual EmpresasMaster IdEmpresaNavigation { get; set; } Property Value EmpresasMaster IdIva public Guid IdIva { get; set; } Property Value Guid Iva public decimal Iva { get; set; } Property Value decimal Nit public string Nit { get; set; } Property Value string NitNavigation public virtual ProveedoresMaster NitNavigation { get; set; } Property Value ProveedoresMaster Periodo public int Periodo { get; set; } Property Value int Porcentaje public decimal Porcentaje { get; set; } Property Value decimal PorcentajeIva public decimal PorcentajeIva { get; set; } Property Value decimal Retenido public decimal Retenido { get; set; } Property Value decimal"
  },
  "api/CasaToro.Consulta.Certificados.Entities.CertificadosRtefte.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.CertificadosRtefte.html",
    "title": "Class CertificadosRtefte | proveedores.usc.com.co",
    "summary": "Class CertificadosRtefte Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class CertificadosRtefte Inheritance object CertificadosRtefte Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Ano public int Ano { get; set; } Property Value int Base public decimal Base { get; set; } Property Value decimal CiudadExpedido public string CiudadExpedido { get; set; } Property Value string CiudadPago public string CiudadPago { get; set; } Property Value string Concepto public string Concepto { get; set; } Property Value string FechaExpedicion public DateOnly FechaExpedicion { get; set; } Property Value DateOnly IdEmpresa public int IdEmpresa { get; set; } Property Value int IdEmpresaNavigation public virtual EmpresasMaster IdEmpresaNavigation { get; set; } Property Value EmpresasMaster IdRtf public Guid IdRtf { get; set; } Property Value Guid Mes public int? Mes { get; set; } Property Value int? Nit public string Nit { get; set; } Property Value string NitNavigation public virtual ProveedoresMaster NitNavigation { get; set; } Property Value ProveedoresMaster Porcentaje public decimal Porcentaje { get; set; } Property Value decimal Retenido public decimal Retenido { get; set; } Property Value decimal"
  },
  "api/CasaToro.Consulta.Certificados.Entities.EmpresasMaster.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.EmpresasMaster.html",
    "title": "Class EmpresasMaster | proveedores.usc.com.co",
    "summary": "Class EmpresasMaster Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class EmpresasMaster Inheritance object EmpresasMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CertificadosIcas public virtual ICollection<CertificadosIca> CertificadosIcas { get; set; } Property Value ICollection<CertificadosIca> CertificadosIvas public virtual ICollection<CertificadosIva> CertificadosIvas { get; set; } Property Value ICollection<CertificadosIva> CertificadosRteftes public virtual ICollection<CertificadosRtefte> CertificadosRteftes { get; set; } Property Value ICollection<CertificadosRtefte> Direccion public string? Direccion { get; set; } Property Value string FacturasProveedores public virtual ICollection<FacturasProveedore> FacturasProveedores { get; set; } Property Value ICollection<FacturasProveedore> IdEmpresa public int IdEmpresa { get; set; } Property Value int Nit public string Nit { get; set; } Property Value string Nombre public string Nombre { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.EmpresasProveedore.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.EmpresasProveedore.html",
    "title": "Class EmpresasProveedore | proveedores.usc.com.co",
    "summary": "Class EmpresasProveedore Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class EmpresasProveedore Inheritance object EmpresasProveedore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IdEmpresa public int IdEmpresa { get; set; } Property Value int IdEmpresaNavigation public virtual EmpresasMaster IdEmpresaNavigation { get; set; } Property Value EmpresasMaster Nit public string Nit { get; set; } Property Value string NitNavigation public virtual ProveedoresMaster NitNavigation { get; set; } Property Value ProveedoresMaster"
  },
  "api/CasaToro.Consulta.Certificados.Entities.FacturasProveedore.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.FacturasProveedore.html",
    "title": "Class FacturasProveedore | proveedores.usc.com.co",
    "summary": "Class FacturasProveedore Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class FacturasProveedore Inheritance object FacturasProveedore Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BancoReceptor public string? BancoReceptor { get; set; } Property Value string CodigoSpiga public int? CodigoSpiga { get; set; } Property Value int? CuentaBancaria public string? CuentaBancaria { get; set; } Property Value string Descripcion public string? Descripcion { get; set; } Property Value string Estado public string Estado { get; set; } Property Value string FechaFactura public DateOnly FechaFactura { get; set; } Property Value DateOnly FechaPago public DateOnly? FechaPago { get; set; } Property Value DateOnly? IdEmpresa public int IdEmpresa { get; set; } Property Value int IdEmpresaNavigation public virtual EmpresasMaster IdEmpresaNavigation { get; set; } Property Value EmpresasMaster IdFactura public Guid IdFactura { get; set; } Property Value Guid Iva public decimal Iva { get; set; } Property Value decimal Moneda public string? Moneda { get; set; } Property Value string Nit public string Nit { get; set; } Property Value string NitNavigation public virtual ProveedoresMaster NitNavigation { get; set; } Property Value ProveedoresMaster NumeroFactura public string? NumeroFactura { get; set; } Property Value string ReteFuente public decimal ReteFuente { get; set; } Property Value decimal ReteIca public decimal ReteIca { get; set; } Property Value decimal ReteIva public decimal ReteIva { get; set; } Property Value decimal ValorPago public decimal? ValorPago { get; set; } Property Value decimal? ValorTotal public decimal ValorTotal { get; set; } Property Value decimal"
  },
  "api/CasaToro.Consulta.Certificados.Entities.LogDescarga.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.LogDescarga.html",
    "title": "Class LogDescarga | proveedores.usc.com.co",
    "summary": "Class LogDescarga Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class LogDescarga Inheritance object LogDescarga Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DocumentoDesc public string DocumentoDesc { get; set; } Property Value string FecDesc public DateTime FecDesc { get; set; } Property Value DateTime IdRegistroDescargas public Guid IdRegistroDescargas { get; set; } Property Value Guid NitTercero public string NitTercero { get; set; } Property Value string NitTerceroNavigation public virtual ProveedoresMaster NitTerceroNavigation { get; set; } Property Value ProveedoresMaster NombreTercero public string NombreTercero { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.LogLogin.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.LogLogin.html",
    "title": "Class LogLogin | proveedores.usc.com.co",
    "summary": "Class LogLogin Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class LogLogin Inheritance object LogLogin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FecLogin public DateTime FecLogin { get; set; } Property Value DateTime IdRegistroLogin public Guid IdRegistroLogin { get; set; } Property Value Guid NitTercero public string NitTercero { get; set; } Property Value string NitTerceroNavigation public virtual ProveedoresMaster NitTerceroNavigation { get; set; } Property Value ProveedoresMaster NombreTercero public string NombreTercero { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.LogLoginAdmin.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.LogLoginAdmin.html",
    "title": "Class LogLoginAdmin | proveedores.usc.com.co",
    "summary": "Class LogLoginAdmin Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class LogLoginAdmin Inheritance object LogLoginAdmin Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FecLogin public DateTime FecLogin { get; set; } Property Value DateTime IdAdmin public string IdAdmin { get; set; } Property Value string IdAdminNavigation public virtual Administradore IdAdminNavigation { get; set; } Property Value Administradore IdRegistroLogin public Guid IdRegistroLogin { get; set; } Property Value Guid NombreAdmin public string NombreAdmin { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.ProveedoresMaster.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.ProveedoresMaster.html",
    "title": "Class ProveedoresMaster | proveedores.usc.com.co",
    "summary": "Class ProveedoresMaster Namespace CasaToro.Consulta.Certificados.Entities Assembly CasaToro.Consulta.Certificados.Entities.dll public class ProveedoresMaster Inheritance object ProveedoresMaster Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CertificadosIcas public virtual ICollection<CertificadosIca> CertificadosIcas { get; set; } Property Value ICollection<CertificadosIca> CertificadosIvas public virtual ICollection<CertificadosIva> CertificadosIvas { get; set; } Property Value ICollection<CertificadosIva> CertificadosRteftes public virtual ICollection<CertificadosRtefte> CertificadosRteftes { get; set; } Property Value ICollection<CertificadosRtefte> Contrasena public string? Contrasena { get; set; } Property Value string Correo public string? Correo { get; set; } Property Value string Direccion public string? Direccion { get; set; } Property Value string FacturasProveedores public virtual ICollection<FacturasProveedore> FacturasProveedores { get; set; } Property Value ICollection<FacturasProveedore> LogDescargas public virtual ICollection<LogDescarga> LogDescargas { get; set; } Property Value ICollection<LogDescarga> LogLogins public virtual ICollection<LogLogin> LogLogins { get; set; } Property Value ICollection<LogLogin> Nit public string Nit { get; set; } Property Value string Nombre public string Nombre { get; set; } Property Value string Telefono public string? Telefono { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Entities.html": {
    "href": "api/CasaToro.Consulta.Certificados.Entities.html",
    "title": "Namespace CasaToro.Consulta.Certificados.Entities | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.Entities Classes Administradore CertificadosIca CertificadosIva CertificadosRtefte EmpresasMaster EmpresasProveedore FacturasProveedore LogDescarga LogLogin LogLoginAdmin ProveedoresMaster"
  },
  "api/CasaToro.Consulta.Certificados.Web.Controllers.AdminController.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Controllers.AdminController.html",
    "title": "Class AdminController | proveedores.usc.com.co",
    "summary": "Class AdminController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll Controlador que maneja las acciones relacionadas con la administración, incluyendo la gestión de proveedores y certificados. [Authorize(Roles = \"Admin\")] public class AdminController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AdminController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminController(CertificateServiceExcel, ProviderService) Constructor del controlador que recibe instancias de los servicios necesarios. public AdminController(CertificateServiceExcel certificateServiceExcel, ProviderService providerService) Parameters certificateServiceExcel CertificateServiceExcel Servicio de certificados desde Excel. providerService ProviderService Servicio de proveedores. Methods GetProviders(int, int, string?) Acción que obtiene la lista de proveedores con paginación y búsqueda opcional. [HttpGet] public IActionResult GetProviders(int pageNumber = 1, int pageSize = 100, string? search = null) Parameters pageNumber int Número de la página actual. pageSize int Cantidad de elementos por página. search string Término de búsqueda opcional para filtrar proveedores por NIT o nombre. Returns IActionResult Lista de proveedores que coinciden con los criterios de búsqueda y paginación. ProviderList() Acción que muestra la vista para la administración de proveedores. public ActionResult ProviderList() Returns ActionResult Vista de administración de proveedores. RestoreProviderPassword(string) Acción que restaura la contraseña de un proveedor a su valor predeterminado (NIT). [HttpGet] public IActionResult RestoreProviderPassword(string nit) Parameters nit string NIT del proveedor. Returns IActionResult Resultado de la operación de restauración de contraseña. UpdateCertificateInfo(IFormFile, string) Acción que maneja la actualización de la información de los certificados desde un archivo Excel. [HttpPost] public IActionResult UpdateCertificateInfo(IFormFile file, string infoType) Parameters file IFormFile Archivo Excel que contiene la información de los certificados. infoType string Tipo de información (IVA, ICA, RTF). Returns IActionResult Resultado de la operación de actualización. UpdateInfo() Acción que muestra la vista principal del administrador. public ActionResult UpdateInfo() Returns ActionResult Vista principal del administrador. UpdateProvider(ProveedoresMaster) Acción que actualiza la información de un proveedor. [HttpPost] public IActionResult UpdateProvider(ProveedoresMaster provider) Parameters provider ProveedoresMaster Objeto ProveedoresMaster con la información actualizada del proveedor. Returns IActionResult Resultado de la operación de actualización."
  },
  "api/CasaToro.Consulta.Certificados.Web.Controllers.LoginController.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Controllers.LoginController.html",
    "title": "Class LoginController | proveedores.usc.com.co",
    "summary": "Class LoginController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll Controlador que maneja las acciones relacionadas con el inicio de sesión y cierre de sesión. public class LoginController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller LoginController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LoginController(LoginService) Constructor del controlador que recibe una instancia de LoginService. public LoginController(LoginService loginService) Parameters loginService LoginService Servicio de login. Methods Index() Acción que muestra la vista de inicio de sesión. public ActionResult Index() Returns ActionResult Vista de inicio de sesión. Login(LoginViewModel) Acción que maneja el envío del formulario de inicio de sesión. [HttpPost] public Task<ActionResult> Login(LoginViewModel model) Parameters model LoginViewModel Modelo de vista de inicio de sesión. Returns Task<ActionResult> Redirección a la página correspondiente según el rol del usuario. Logout() Acción que maneja el cierre de sesión. public ActionResult Logout() Returns ActionResult Redirección a la página de inicio de sesión."
  },
  "api/CasaToro.Consulta.Certificados.Web.Controllers.ProviderController.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Controllers.ProviderController.html",
    "title": "Class ProviderController | proveedores.usc.com.co",
    "summary": "Class ProviderController Namespace CasaToro.Consulta.Certificados.Web.Controllers Assembly CasaToro.Consulta.Certificados.Web.dll [Authorize] public class ProviderController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ProviderController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProviderController(BillService, ProviderService, CertificatesService, LogService) public ProviderController(BillService billService, ProviderService providerService, CertificatesService certificatesServices, LogService logService) Parameters billService BillService providerService ProviderService certificatesServices CertificatesService logService LogService Methods Bill() public ActionResult Bill() Returns ActionResult Certificates() public ActionResult Certificates() Returns ActionResult DeleteCertificate(string) [HttpPost] public IActionResult DeleteCertificate(string url) Parameters url string Returns IActionResult GenerateCertificate(string, string, string, string) [HttpPost] public IActionResult GenerateCertificate(string certificateType, string companyId, string year, string period) Parameters certificateType string companyId string year string period string Returns IActionResult UpdatePassword(string) [HttpPost] public IActionResult UpdatePassword(string password) Parameters password string Returns IActionResult UpdateProvider(ProveedoresMaster) public IActionResult UpdateProvider(ProveedoresMaster provider) Parameters provider ProveedoresMaster Returns IActionResult VerifyPassword(string) [HttpPost] public IActionResult VerifyPassword(string currentPassword) Parameters currentPassword string Returns IActionResult editProfile() public ActionResult editProfile() Returns ActionResult"
  },
  "api/CasaToro.Consulta.Certificados.Web.Controllers.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Controllers.html",
    "title": "Namespace CasaToro.Consulta.Certificados.Web.Controllers | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.Web.Controllers Classes AdminController Controlador que maneja las acciones relacionadas con la administración, incluyendo la gestión de proveedores y certificados. LoginController Controlador que maneja las acciones relacionadas con el inicio de sesión y cierre de sesión. ProviderController"
  },
  "api/CasaToro.Consulta.Certificados.Web.Models.BillsViewModel.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Models.BillsViewModel.html",
    "title": "Class BillsViewModel | proveedores.usc.com.co",
    "summary": "Class BillsViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class BillsViewModel Inheritance object BillsViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Bills public List<FacturasProveedore> Bills { get; set; } Property Value List<FacturasProveedore>"
  },
  "api/CasaToro.Consulta.Certificados.Web.Models.CertificatesViewModel.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Models.CertificatesViewModel.html",
    "title": "Class CertificatesViewModel | proveedores.usc.com.co",
    "summary": "Class CertificatesViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class CertificatesViewModel Inheritance object CertificatesViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields companies public List<EmpresasMaster> companies Field Value List<EmpresasMaster> months public HashSet<string> months Field Value HashSet<string> years public HashSet<int> years Field Value HashSet<int>"
  },
  "api/CasaToro.Consulta.Certificados.Web.Models.LoginViewModel.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Models.LoginViewModel.html",
    "title": "Class LoginViewModel | proveedores.usc.com.co",
    "summary": "Class LoginViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class LoginViewModel Inheritance object LoginViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password public string Password { get; set; } Property Value string UserName public string UserName { get; set; } Property Value string"
  },
  "api/CasaToro.Consulta.Certificados.Web.Models.ProfileViewModel.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Models.ProfileViewModel.html",
    "title": "Class ProfileViewModel | proveedores.usc.com.co",
    "summary": "Class ProfileViewModel Namespace CasaToro.Consulta.Certificados.Web.Models Assembly CasaToro.Consulta.Certificados.Web.dll public class ProfileViewModel Inheritance object ProfileViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Provider public ProveedoresMaster Provider { get; set; } Property Value ProveedoresMaster"
  },
  "api/CasaToro.Consulta.Certificados.Web.Models.html": {
    "href": "api/CasaToro.Consulta.Certificados.Web.Models.html",
    "title": "Namespace CasaToro.Consulta.Certificados.Web.Models | proveedores.usc.com.co",
    "summary": "Namespace CasaToro.Consulta.Certificados.Web.Models Classes BillsViewModel CertificatesViewModel LoginViewModel ProfileViewModel"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | proveedores.usc.com.co",
    "summary": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | proveedores.usc.com.co",
    "summary": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | proveedores.usc.com.co",
    "summary": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}